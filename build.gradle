plugins {
    id 'fabric-loom' version '0.5-SNAPSHOT'
    id 'maven-publish'
}


group = "com.terraforged"
version = "${minecraft_version}-${mod_version}${getClassifier()}"
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

allprojects {
    apply plugin: "java"
}

configurations {
    lib
    compile.extendsFrom lib
}

repositories {
    maven { url "https://io.terraforged.com/repository/maven/" }
    mavenCentral()
    jcenter()
}

// If building from source
dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    lib "com.terraforged:Engine:0.2.0"
    compileOnly "com.google.code.findbugs:jsr305:3.0.2"
    implementation "com.electronwill.night-config:toml:3.6.2"

}

minecraft {
    accessWidener = file("src/main/resources/terraforged.aw")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // The Minecraft launcher currently installs Java 8 for users, so your mod probably wants to target Java 8 too
    // JDK 9 introduced a new way of specifying this that will make sure no newer classes or methods are used.
    // We'll use that if it's available, but otherwise we'll use the older option.
    def targetVersion = 8
    if (JavaVersion.current().isJava9Compatible()) {
        it.options.release = targetVersion
    }
}


sourceSets {
    main.java {
        srcDirs += "Module-TerraForgedAPI/src/main/java"
        srcDirs += "Module-FeatureManager/src/main/java"
    }
    // add resources for the runData task to path
    main.resources {
        srcDirs += "Module-Data/resources/"
        srcDirs += "Module-TerraForgedAPI/src/main/resources"
        srcDirs += "Module-FeatureManager/src/main/resources"
        exclude ".cache"
    }
}

task collectLibs(type: Copy) {
    // require upstream projects to be jar'd first
    dependsOn(dependsOn: subprojects.tasks["jar"])

    // copy contents to build dir ignoring dupes
    from { configurations.lib.collect { it.isDirectory() ? it : zipTree(it) } }
    into("build/classes/java/main")
    duplicatesStrategy = "EXCLUDE"
}

processResources {
    filesMatching("**/mods.toml") {
        // replaces the version string in the mods.toml
        expand("version": "${mod_version}${getClassifier()}", "mc_version": minecraft_version)
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

classes {
    // collect all dependency classes first
    dependsOn(collectLibs)
}

jar {
    duplicatesStrategy = "EXCLUDE"
    manifest {
        attributes([
                "Specification-Title": "TerraForged",
                "Specification-Vendor": "TerraForged",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"TerraForged",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "mixin.terraforged.json"
        ])
    }
}

//task signJar(type: SignJar, dependsOn: "reobfJar") {
//    onlyIf { project.hasProperty("signing.keystore.path") }
//    keyStore = project.findProperty("signing.keystore.path")
//    storePass = project.findProperty("signing.keystore.pass")
//    alias = project.findProperty("signing.key.name")
//    keyPass = project.findProperty("signing.key.pass")
//    inputFile = jar.archivePath
//    outputFile = jar.archivePath
//}

build {
    dependsOn("signJar")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }

    if (System.getenv("MAVEN_USER") != null && System.getenv("MAVEN_PASS") != null) {
        repositories {
            maven {
                url = "https://io.terraforged.com/repository/maven/"
                credentials {
                    username System.getenv("MAVEN_USER")
                    password System.getenv("MAVEN_PASS")
                }
            }
        }
    }
}

def getClassifier() {
    def classifier = ""
    if (System.getenv("GIT_TAG_NAME") == null) {
        // Append development version (ALPHA/BETA/RC-#)
        def dev = "${dev_version}"
        if (!dev.isEmpty()) {
            classifier += "-${dev_version}"
        }

        // Append build number if on CI server
        def buildNumber = System.getenv("BUILD_NUMBER")
        if (buildNumber != null) {
            classifier += "-${buildNumber}"
        }
    }
    return classifier
}